[
  {
    "objectID": "Time_series_2.html",
    "href": "Time_series_2.html",
    "title": "Auto Machine Learning",
    "section": "",
    "text": "·ªû b√†i vi·∫øt n√†y, ch√∫ng ta s·∫Ω ti·∫øp t·ª•c v·ªõi ƒë·ªÅ t√†i ph√¢n t√≠ch d·ªØ li·ªáu th·ªùi gian trong Qu·∫£n l√≠ chu·ªói cung ·ª©ng.\nL√Ω do m√¨nh ti·∫øp t·ª•c v·ªõi ch·ªß ƒë·ªÅ n√†y l√† v√¨ ·ªü b√†i vi·∫øt tr∆∞·ªõc ph·∫ßn x√¢y d·ª±ng m√¥ h√¨nh Machine Learning v·ªõi R v·∫´n ch∆∞a t·ªët, ho·∫∑c l√†m m√¨nh ch∆∞a c·∫£m th·∫•y ƒë√£ üòÖüòÖ . C√°c b·∫°n n√†o ch∆∞a ƒë·ªçc ho·∫∑c mu·ªën xem l·∫°i topic tr∆∞·ªõc th√¨ c√≥ th·ªÉ ·∫•n v√†o ƒë√¢y Time series model.\nV√¨ v·∫≠y, ·ªü b√†i vi·∫øt n√†y, m√¨nh s·∫Ω t·∫≠p trung v√†o x√¢y d·ª±ng m√¥ h√¨nh Machine Learning ƒë·ªÉ ƒë∆∞a ra d·ª± b√°o t·ªët h∆°n. Ngo√†i ra, m√¨nh c≈©ng gi·ªõi thi·ªáu hai packages trong R c√≥ kh·∫£ nƒÉng x·ª≠ l√≠ t·ªët d·ªØ li·ªáu th·ªùi gian m√† kh√¥ng t·ªën nhi·ªÅu c√¥ng s·ª©c, ƒë√≥ l√† package timetk v√† modeltime.h2o .\n\n\nƒê·∫ßu ti√™n, v·∫´n l√† thao t√°c quen thu·ªôc trong R, ch√∫ng ta s·∫Ω t·∫£i d·ªØ li·ªáu v√† c√°c packages c·∫ßn thi·∫øt v√†o.\n\n\nCode\n#Call packages:\npacman::p_load(rio,\n               here,\n               janitor,\n               tidyverse,\n               dplyr,\n               magrittr,\n               lubridate,\n               stringr\n               )\n\n\n\n\n\n\n\n\nT·∫£i th∆∞ vi·ªán:\n\n\n\nN·∫øu c√°c b·∫°n ch∆∞a c√≥ c√°c packages n√†y, b·∫°n c√≥ th·ªÉ t·∫£i xu·ªëng t·ª´ CRAN R b·∫±ng c√∫ ph√°p: `install.packages(*\"name_of_package\"*)`\n\n\nTh√¥ng th∆∞·ªùng khi ph√¢n t√≠ch, vi·ªác x·ª≠ l√≠ d·ªØ li·ªáu kh√° t·ªën th·ªùi gian v√† c√¥ng s·ª©c. B·∫°n c√≥ th·ªÉ xem ph·∫ßn code x·ª≠ l√≠ c·ªßa Frank Corrigan d∆∞·ªõi ƒë√¢y ƒë·ªÉ ti·∫øt ki·ªám th·ªùi gian.\n\n\nCode\n#Change to suitable class (I change the name dataset to product_demand to shortly write)\nproduct_demand &lt;-product_demand %&gt;% \n    mutate(Date = as.Date(Date,format = \"%Y/%m/%d\"),\n           Product_Category = as.factor(Product_Category))\n\nproduct_demand$Order_Demand &lt;- \n  gsub(\"[(]\", \"-\", product_demand$Order_Demand)\nproduct_demand$Order_Demand &lt;- \n  gsub(\"[)]\", \"\", product_demand$Order_Demand)\nproduct_demand$Order_Demand &lt;- \n  as.numeric(product_demand$Order_Demand)\n\n#Then I will create a lot of cols contain year, month, week data and just select from 2012 to 2016:\nproduct_demand &lt;-product_demand %&gt;%\n  mutate(Month = month(Date),\n         Year = year(Date),\n         Week_day = wday(Date)) %&gt;% \n  filter(Year %in% c(2016:2012) & Order_Demand &gt; 0) \n\n\n#So I will calculate the total order demand divided by year and month:\ndaily_df&lt;-product_demand %&gt;% \n  group_by(Warehouse,Date) %&gt;%   \n  summarise(daily_demand = round(sum(Order_Demand,\n                               na.rm = T))) %&gt;% \n  ungroup()\n\n\nSau ƒë√≥, ch√∫ng ta t·∫£i d·ªØ li·ªáu v√†o R. N·∫øu b·∫°n n√†o ch∆∞a c√≥, b·∫°n c√≥ th·ªÉ ·∫•n v√†o n√∫t t·∫£i ph√≠a d∆∞·ªõi n√†y ƒë·ªÉ t·∫£i d·ªØ li·ªáu v·ªÅ th·ª±c h√†nh.\n\n\nCode\nlibrary(downloadthis)\nproduct_demand %&gt;%\n  download_this(\n    output_name = \"product_demand\",\n    output_extension = \".csv\",\n    button_label = \"Download data\",\n    button_type = \"warning\",\n    has_icon = TRUE,\n    icon = \"fa fa-save\"\n  )\n\n\n Download data"
  },
  {
    "objectID": "Time_series_2.html#chu·∫©n-b·ªã-d·ªØ-li·ªáu",
    "href": "Time_series_2.html#chu·∫©n-b·ªã-d·ªØ-li·ªáu",
    "title": "Auto Machine Learning",
    "section": "",
    "text": "ƒê·∫ßu ti√™n, v·∫´n l√† thao t√°c quen thu·ªôc trong R, ch√∫ng ta s·∫Ω t·∫£i d·ªØ li·ªáu v√† c√°c packages c·∫ßn thi·∫øt v√†o.\n\n\nCode\n#Call packages:\npacman::p_load(rio,\n               here,\n               janitor,\n               tidyverse,\n               dplyr,\n               magrittr,\n               lubridate,\n               stringr\n               )\n\n\n\n\n\n\n\n\nT·∫£i th∆∞ vi·ªán:\n\n\n\nN·∫øu c√°c b·∫°n ch∆∞a c√≥ c√°c packages n√†y, b·∫°n c√≥ th·ªÉ t·∫£i xu·ªëng t·ª´ CRAN R b·∫±ng c√∫ ph√°p: `install.packages(*\"name_of_package\"*)`\n\n\nTh√¥ng th∆∞·ªùng khi ph√¢n t√≠ch, vi·ªác x·ª≠ l√≠ d·ªØ li·ªáu kh√° t·ªën th·ªùi gian v√† c√¥ng s·ª©c. B·∫°n c√≥ th·ªÉ xem ph·∫ßn code x·ª≠ l√≠ c·ªßa Frank Corrigan d∆∞·ªõi ƒë√¢y ƒë·ªÉ ti·∫øt ki·ªám th·ªùi gian.\n\n\nCode\n#Change to suitable class (I change the name dataset to product_demand to shortly write)\nproduct_demand &lt;-product_demand %&gt;% \n    mutate(Date = as.Date(Date,format = \"%Y/%m/%d\"),\n           Product_Category = as.factor(Product_Category))\n\nproduct_demand$Order_Demand &lt;- \n  gsub(\"[(]\", \"-\", product_demand$Order_Demand)\nproduct_demand$Order_Demand &lt;- \n  gsub(\"[)]\", \"\", product_demand$Order_Demand)\nproduct_demand$Order_Demand &lt;- \n  as.numeric(product_demand$Order_Demand)\n\n#Then I will create a lot of cols contain year, month, week data and just select from 2012 to 2016:\nproduct_demand &lt;-product_demand %&gt;%\n  mutate(Month = month(Date),\n         Year = year(Date),\n         Week_day = wday(Date)) %&gt;% \n  filter(Year %in% c(2016:2012) & Order_Demand &gt; 0) \n\n\n#So I will calculate the total order demand divided by year and month:\ndaily_df&lt;-product_demand %&gt;% \n  group_by(Warehouse,Date) %&gt;%   \n  summarise(daily_demand = round(sum(Order_Demand,\n                               na.rm = T))) %&gt;% \n  ungroup()\n\n\nSau ƒë√≥, ch√∫ng ta t·∫£i d·ªØ li·ªáu v√†o R. N·∫øu b·∫°n n√†o ch∆∞a c√≥, b·∫°n c√≥ th·ªÉ ·∫•n v√†o n√∫t t·∫£i ph√≠a d∆∞·ªõi n√†y ƒë·ªÉ t·∫£i d·ªØ li·ªáu v·ªÅ th·ª±c h√†nh.\n\n\nCode\nlibrary(downloadthis)\nproduct_demand %&gt;%\n  download_this(\n    output_name = \"product_demand\",\n    output_extension = \".csv\",\n    button_label = \"Download data\",\n    button_type = \"warning\",\n    has_icon = TRUE,\n    icon = \"fa fa-save\"\n  )\n\n\n Download data"
  },
  {
    "objectID": "Time_series_2.html#th√¥ng-tin",
    "href": "Time_series_2.html#th√¥ng-tin",
    "title": "Auto Machine Learning",
    "section": "2.1 Th√¥ng tin:",
    "text": "2.1 Th√¥ng tin:\nPackage timetk l√† m·ªôt package n·∫±m trong h·ªá sinh th√°i modeltime ƒë·ªÉ ph√¢n t√≠ch v√† d·ª± b√°o chu·ªói th·ªùi gian. N√≥ c√≥ th·ªÉ d·ª± b√°o r·∫•t r·ªông v√† gi√∫p ng∆∞·ªùi d√πng tr√°nh m·∫•t nhi·ªÅu th·ªùi gian ƒë·ªÉ t√¨m hi·ªÉu, g·ªìm nh·ªØng ƒë·∫∑c ƒëi·ªÉm sau:\n\nNhi·ªÅu thu·∫≠t to√°n.\nT·∫≠p h·ª£p v√† l·∫•y m·∫´u l·∫°i.\nH·ªçc m√°y.\nH·ªçc s√¢u.\nM√¥ h√¨nh h√≥a c√≥ th·ªÉ m·ªü r·ªông: H∆°n 10.000 chu·ªói th·ªùi gian\n\nPackage timetk c√≥ trong CRAN, b·∫°n c√≥ th·ªÉ t·∫£i xu·ªëng th√¥ng qua c√∫ ph√°p install.packages(\"timetk\"). Th√¥ng tin th√™m, b·∫°n c√≥ th·ªÉ theo d√µi post c·ªßa (Matt Dancho, n.d.)"
  },
  {
    "objectID": "Time_series_2.html#th·ª±c-h√†nh-trong-r",
    "href": "Time_series_2.html#th·ª±c-h√†nh-trong-r",
    "title": "Auto Machine Learning",
    "section": "2.2 Th·ª±c h√†nh trong R:",
    "text": "2.2 Th·ª±c h√†nh trong R:\n·ªû b√†i tr∆∞·ªõc, b·∫°n c√≥ th·ªÉ th·∫•y ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu d·∫°ng th·ªùi gian trong R th√¨ ta c·∫ßn ph·∫£i chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang class zoo ho·∫∑c xts r·ªìi m·ªõi d√πng package dygraphs ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu.\nTrong timetk, ta kh√¥ng c·∫ßn chuy·ªÉn ƒë·ªïi m√† ch·ªâ c·∫ßn d·ªØ li·ªáu ·ªü d·∫°ng b·∫£ng l√† c√≥ th·ªÉ t·∫°o ƒë∆∞·ª£c bi·ªÉu ƒë·ªì. Ngo√†i ra, b·∫°n ho√†n to√†n d·ªÖ d√†ng t·∫°o theo nh√≥m b·∫±ng c√°ch th√™m h√†m group_by() ·ªü tr∆∞·ªõc.\n\n\n\n\n\n\nTh√™m s·ª± t∆∞∆°ng t√°c:\n\n\n\nH√†m plot_time_series() s·∫Ω hi·ªÉn th·ªã d·ªØ li·ªáu d·∫°ng ƒë∆∞·ªùng line nh∆∞ c√°c bi·ªÉu ƒë·ªì th√¥ng th∆∞·ªùng.\nB·∫°n c√≥ th·ªÉ th√™m ƒë·ªëi s·ªë .interactive = TRUE ƒë·ªÉ ng∆∞·ªùi d√πng t∆∞∆°ng t√°c d∆∞·ªõi d·∫°ng HTML"
  },
  {
    "objectID": "Time_series_2.html#chu·∫©n-b·ªã-d·ªØ-li·ªáu-1",
    "href": "Time_series_2.html#chu·∫©n-b·ªã-d·ªØ-li·ªáu-1",
    "title": "Auto Machine Learning",
    "section": "2.3 Chu·∫©n b·ªã d·ªØ li·ªáu:",
    "text": "2.3 Chu·∫©n b·ªã d·ªØ li·ªáu:\n\n\nCode\nlibrary(timetk)\ndaily_df %&gt;% \n  group_by(Warehouse) %&gt;% \n  plot_time_series(Date, \n                 daily_demand,\n                 .facet_ncol  = 2,\n                 .smooth      = F,\n                 .interactive = TRUE)\n\n\n\n\n\n\nNh∆∞ bi·ªÉu ƒë·ªì tr√™n, ta c√≥ th·ªÉ ƒë√°nh gi√° r·∫±ng:\n\nNh√† kho A: nhu c·∫ßu ƒë·∫∑t h√†ng c·ªßa kh√°ch ·ªü m·ª©c th·∫•p nh·∫•t trong 4 nh√† kho. Ch·ªâ c√≥ cu·ªëi nƒÉm 2015 l√† ƒë·ªôt ng·ªôt tƒÉng cao, kh·∫£ nƒÉng l√† nh√† kho n√†y ƒëang b√π h√†ng v√†o ƒë·ª£t sales cu·ªëi nƒÉm cho c√°c kho kh√°c ƒë·ªÉ tr√°nh outstock.\nNh√† kho J: ta th·∫•y nhu c·∫ßu ƒë·∫∑t h√†ng c√≥ m·ª©c ƒë·ªô bi·∫øn ƒë·ªông cao. V√¨ v·∫≠y, nh√† kho n√†y kh√¥ng ch·ªâ c·∫ßn ph·ªëi h·ª£p gi·ªØa vi·ªác forecasting v√† x√¢y d·ª±ng nhi·ªÅu plan backup ƒë·ªÉ ƒë·∫£m b·∫£o h√†ng kh√¥ng outstock c≈©ng nh∆∞ gi·∫£m chi ph√≠ t·ªìn kho (inventory cost).\nNh√† kho C v√† S: nhu c·∫ßu ƒë·∫∑t h√†ng c√≥ v·∫ª ·ªïn ƒë·ªãnh h∆°n ch·ªâ tr·ª´ v√†i ng√†y nhu c·∫ßu tƒÉng cao ƒë·ªôt bi·ªÉn.\n\nSau khi ph√¢n t√≠ch, ch√∫ng ta s·∫Ω ƒëi t·ªõi ph·∫ßn x√¢y d·ª±ng m√¥ h√¨nh. B∆∞·ªõc ƒë·∫ßu ti√™n v·∫´n l√† chia b·ªô d·ªØ li·ªáu ·ªü t·ªâ l·ªá 7:3 th√†nh training set v√† testing set. ·ªû ƒë√¢y, ta s·∫Ω s·ª≠ d·ª•ng c√°c h√†m sau ƒë·ªÉ:\nƒê·∫ßu ti√™n, ch√∫ng ta c≈©ng chia d·ªØ li·ªáu th√†nh 2 b·ªô b·∫±ng h√†m time_series_split().\nSau ƒë√≥, t·∫°o bi·ªÉu ƒë·ªì b·∫±ng:\n\ntk_time_series_cv_plan(): Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ƒë√£ resample th√†nh d·∫°ng b·∫£ng.\nplot_time_series_cv_plan(): Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ resample th·ªùi gian.\n\n\n\nCode\nsplits &lt;- time_series_split(daily_df, \n                            assess = \"12 month\",\n                            cumulative = TRUE)\n\nsplits %&gt;%\n  tk_time_series_cv_plan() %&gt;%\n  plot_time_series_cv_plan(Date, \n                           daily_demand, \n                           .interactive = T)"
  },
  {
    "objectID": "Time_series_2.html#chia-d·ªØ-li·ªáu",
    "href": "Time_series_2.html#chia-d·ªØ-li·ªáu",
    "title": "Auto Machine Learning",
    "section": "2.4 Chia d·ªØ li·ªáu:",
    "text": "2.4 Chia d·ªØ li·ªáu:\nTi·∫øp theo, ch√∫ng ta s·∫Ω x√¢y d·ª±ng m√¥ h√¨nh v·ªõi m√¥ h√¨nh v·ªõi package {recipe}. ƒêi·ªÅu ƒë·∫∑c bi·ªát l√† trong R package {timetk} c√≥ k·∫øt h·ª£p v·ªõi {recipe}.\nC√°c b∆∞·ªõc bao g·ªìm:\n\nB1: T·∫°o ƒë·ªëi t∆∞·ª£ng d·∫°ng class recipe() v·ªõi d·ªØ li·ªáu t·ª´ training set.\nB2: S·ª≠ d·ª•ng h√†m step_timeseries_signature() ƒë·ªÉ chuy·ªÉn ƒë·ªïi t·ª´ d·ªØ li·ªáu ng√†y ho·∫∑c gi·ªù th√†nh nhi·ªÅu t√≠nh nƒÉng c√≥ th·ªÉ h·ªó tr·ª£ cho vi·ªác x√¢y d·ª±ng m√¥ h√¨nh h·ªçc m√°y v·ªõi d·ªØ li·ªáu chu·ªói th·ªùi gian.\nB3: T√°ch b·ªô d·ªØ li·ªáu th√†nh training set v√† testing set c√πng v·ªõi c√°c ƒë·∫∑c t√≠nh ƒë√£ t·∫°o ·ªü tr√™n b·∫±ng h√†m prep() v√† bake().\n\n\n\nCode\nlibrary(rsample)\n\n\nWarning: package 'rsample' was built under R version 4.2.3\n\n\nCode\nlibrary(recipes)\nrecipe_spec &lt;- recipe(daily_demand ~ ., \n                      data = training(splits)) %&gt;%\n    step_timeseries_signature(Date) \n\ntrain_tbl &lt;- training(splits) %&gt;% bake(prep(recipe_spec), .)\n\ntest_tbl  &lt;- testing(splits) %&gt;% bake(prep(recipe_spec), .)\n\n\nB·∫°n c√≥ th·ªÉ th·∫•y khi √°p d·ª•ng k·∫øt h·ª£p c√¥ng th·ª©c prep() v√† bake() th√¨ nhi·ªÅu c·ªôt m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m v√†o t·ª´ t√≠nh nƒÉng c·ªßa ‚Äúng√†y‚Äù. ƒê√¢y l√† nh·ªØng t√≠nh nƒÉng ch√∫ng ta c√≥ th·ªÉ s·ª≠ d·ª•ng trong c√°c m√¥ h√¨nh h·ªçc m√°y c·ªßa m√¨nh."
  },
  {
    "objectID": "Time_series_2.html#x√¢y-d·ª±ng-m√¥-h√¨nh",
    "href": "Time_series_2.html#x√¢y-d·ª±ng-m√¥-h√¨nh",
    "title": "Auto Machine Learning",
    "section": "2.5 X√¢y d·ª±ng m√¥ h√¨nh:",
    "text": "2.5 X√¢y d·ª±ng m√¥ h√¨nh:\n·ªû ƒë√¢y, ch√∫ng ta s·ª≠ d·ª•ng package modeltime.h2o. N√≥ s·∫Ω hu·∫•n luy·ªán v√† ki·ªÉm ch·ª©ng ch√©o (cross-validates) nhi·ªÅu m√¥ h√¨nh h·ªçc m√°y v√† h·ªçc s√¢u (XGBoost GBM, GLM, R·ª´ng ng·∫´u nhi√™n, GBM‚Ä¶), sau ƒë√≥ hu·∫•n luy·ªán hai m√¥ h√¨nh Stacked Ensembled, m·ªôt trong t·∫•t c·∫£ c√°c m√¥ h√¨nh v√† m·ªôt trong nh·ªØng m√¥ h√¨nh t·ªët nh·∫•t c·ªßa m·ªói lo·∫°i. Cu·ªëi c√πng, m√¥ h√¨nh t·ªët nh·∫•t ƒë∆∞·ª£c l·ª±a ch·ªçn.\nV√¨ n√≥ kh√¥ng c√≥ s·∫µn tr√™n CRAN n√™n b·∫°n c√≥ th·ªÉ t·∫£i theo c√∫ ph√°p d∆∞·ªõi ƒë√¢y v√† th√¥ng tin th√™m ·ªü ƒë√¢y (Matt Dancho 2024).\n\n\n\n\n\n\n\n\n\n\n\nT·∫£i package Modeltime H2O:\n\n\n\ndevtools::install_github(\"business-science/modeltime.h2o\")\n\n\nTr∆∞·ªõc khi s·ª≠ d·ª•ng modeltime.h2o, c·∫ßn ph·∫£i k·∫øt n·ªëi v·ªõi d·∫°ng H2O th√¥ng qua h√†m h2o.init().\n\n\nCode\nh2o.init(\n    nthreads = -1,\n    ip       = 'localhost',\n    port     = 54321\n)\n\n\nNgo√†i ra c√≥ m·ªôt ƒëi·ªÅu l∆∞u √Ω khi b·∫°n l√†m vi·ªác v·ªõi package modeltime ƒë√≥ l√† output t·ª´ R s·∫Ω xu·∫•t hi·ªán c√°c d√≤ng nh∆∞ ki·ªÉu |=========================================| 100% v√† khi xu·∫•t output ra d·∫°ng HTML hay PDF th√¨ n√≥ v·∫´n xu·∫•t hi·ªán. ƒêi·ªÅu n√†y l√†m x·∫•u ƒëi b√†i b√°o c√°o c·ªßa m√¨nh n√™n ch√∫ng ta c√≥ th·ªÉ s·ª≠ d·ª•ng h√†m invisible() ƒë·ªÉ R hi·ªÉu v√† ch·ªâ ƒë∆∞a ra k·∫øt qu·∫£ cu·ªëi c√πng, b·ªè qua th√¥ng b√°o t·ª´ process.\n\n\nCode\nlibrary(modeltime.h2o)\nlibrary(parsnip)\n    ## T·∫°o ra c√°c ti√™u ch√≠ cho m√¥ h√¨nh:\nmodel_spec &lt;- automl_reg(mode = 'regression') %&gt;%\n    set_engine(\n         engine                     = 'h2o',\n         max_runtime_secs           = 5, \n         max_runtime_secs_per_model = 3,\n         max_models                 = 3,\n         nfolds                     = 5,\n         exclude_algos              = c(\"DeepLearning\"),\n         verbosity                  = NULL,\n         seed                       = 786\n    ) \n\n## D√πng c√°c ti√™u ch√≠ ƒë√≥ ƒë·ªÉ x√¢y d·ª±ng train m√¥ h√¨nh:\nmodel_fitted &lt;- model_spec %&gt;%\n    fit(daily_demand ~ ., \n        data = train_tbl)\n\n\n\n\n\n\n\n\n  \n    \n      ƒê√°nh gi√° m√¥ h√¨nh\n\n    \n    \n      Ngu·ªìn: package modeltime.h2o\n\n    \n    \n      M√¥ h√¨nh\n\n      Sai s·ªë trung b√¨nh\n\n    \n  \n  \n    GBM_1_AutoML_11_20240915_232904\n3.399269e+11\n    GLM_1_AutoML_11_20240915_232904\n1.314349e+12\n  \n  \n  \n\n\n\n\nK·∫øt qu·∫£ s·∫Ω ra c√°c m√¥ h√¨nh t·ªët nh·∫•t ƒë∆∞·ª£c l∆∞u tr·ªØ trong b·∫£ng x·∫øp h·∫°ng d·ª±a tr√™n c√°c ch·ªâ s·ªë ƒë√°nh gi√° quen thu·ªôc nh∆∞: RMSE,MSE,MAE,‚Ä¶\nTheo m·∫∑c ƒë·ªãnh, m√¥ h√¨nh c√≥ gi√° tr·ªã trung b√¨nh v·ªÅ sai s·ªë th·∫•p nh·∫•t s·∫Ω ƒë∆∞·ª£c h·ªçn v√† tr·∫£ v·ªÅ ·ªü d·∫°ng class H20AutoML. ƒê·ªÉ bi·∫øt th√™m th√¥ng tin, h√£y b·∫°n c√≥ th·ªÉ d√πng c√∫ ph√°p ?h2o.automl ·ªü console.\nNgo√†i ra, gi·∫£ s·ª≠ b·∫°n ch·ªâ c·∫ßn t√™n c√°c m√¥ h√¨nh t·ªët nh·∫•t x·∫øp t·ª´ tr√™n xu·ªëng t·ª´ R, b·∫°n c√≥ th·ªÉ d√πng h√†m automl_leaderbord ƒë·ªÉ xu·∫•t ra."
  },
  {
    "objectID": "Time_series_2.html#d·ª±-ƒëo√°n-b·∫±ng-m√¥-h√¨nh-v·ª´a-x√¢y-d·ª±ng",
    "href": "Time_series_2.html#d·ª±-ƒëo√°n-b·∫±ng-m√¥-h√¨nh-v·ª´a-x√¢y-d·ª±ng",
    "title": "Auto Machine Learning",
    "section": "2.6 D·ª± ƒëo√°n b·∫±ng m√¥ h√¨nh v·ª´a x√¢y d·ª±ng:",
    "text": "2.6 D·ª± ƒëo√°n b·∫±ng m√¥ h√¨nh v·ª´a x√¢y d·ª±ng:\nCu·ªëi c√πng, ta s·∫Ω d√πng m√¥ h√¨nh t·ªët nh·∫•t ƒë∆∞·ª£c nh·∫Øc ·ªü tr√™n ƒë·ªÉ d·ª± ƒëo√°n d·ªØ li·ªáu b·∫±ng h√†m predict.\nB·∫£ng d∆∞·ªõi ƒë√¢y tr√¨nh b√†y v·ªÅ gi√° tr·ªã d·ª± ƒëo√°n ·ªü c·∫£ 4 nh√† kho. V√¨ ƒë·ªÉ minh h·ªça n√™n m√¨nh ch·ªâ th·ªÉ hi·ªán 6 h√†ng ƒë·∫ßu ti√™n c·ªßa b·∫£ng.\n\n\nCode\ninvisible(capture.output({\nn&lt;-predict(model_fitted, test_tbl)\n}))\n\nn&lt;-head(n) %&gt;% \n     mutate(Date = head(test_tbl$Date),\n            Warehouse = c(\"A\",\"C\",\"J\",\"S\",\"A\",\"C\"))\nlibrary(gt)\nlibrary(gtExtras)\ngt(n[c(\"Date\",\"Warehouse\",\".pred\")]) %&gt;% \n   cols_label(\n    Date = md(\"**Ng√†y d·ª± b√°o**\"),\n    Warehouse = md(\"**Nh√† kho**\"),\n    .pred = md(\"**Gi√° tr·ªã d·ª± b√°o**\")) %&gt;%\n  cols_align(\n    align = \"center\",\n    columns = Warehouse\n  ) %&gt;% \n   tab_header(\n    title = md(\"**K·∫øt qu·∫£ d·ª± b√°o**\"),\n    subtitle = md(\"Ngu·ªìn: package modeltime.h2o\")) %&gt;% \n  gt_theme_538()\n\n\n\n\n\n\n  \n    \n      K·∫øt qu·∫£ d·ª± b√°o\n\n    \n    \n      Ngu·ªìn: package modeltime.h2o\n\n    \n    \n      Ng√†y d·ª± b√°o\n\n      Nh√† kho\n\n      Gi√° tr·ªã d·ª± b√°o\n\n    \n  \n  \n    2015-12-08\nA\n108655.82\n    2015-12-08\nC\n456436.33\n    2015-12-08\nJ\n2889507.46\n    2015-12-08\nS\n1287950.19\n    2015-12-09\nA\n17942.52\n    2015-12-09\nC\n457534.46"
  },
  {
    "objectID": "Time_series_2.html#ƒë√°nh-gi√°-m√¥-h√¨nh",
    "href": "Time_series_2.html#ƒë√°nh-gi√°-m√¥-h√¨nh",
    "title": "Auto Machine Learning",
    "section": "2.7 ƒê√°nh gi√° m√¥ h√¨nh:",
    "text": "2.7 ƒê√°nh gi√° m√¥ h√¨nh:\nSau khi ƒë√£ d·ª± ƒëo√°n, vi·ªác quan tr·ªçng cu·ªëi c√πng l√† ƒë√°nh gi√° ƒë·ªô t·ªët c·ªßa m√¥ h√¨nh v·ª´a train. V√† package modeltime c√≥ cung c·∫•p th√™m h√†m:\n\nmodeltime_table(): chuy·ªÉn ƒë·ªëi t∆∞·ª£ng class h2o v·ªÅ d·∫°ng d·ªØ li·ªáu b·∫£ng.\nmodeltime_calibrate(): h√†m ƒë·ªÉ ƒë√°nh gi√° m√¥ h√¨nh ƒë∆∞·ª£c x√¢y d·ª±ng.\nmodeltime_forecast(): h√†m ƒë·ªÉ d·ª± ƒëo√°n gi√° tr·ªã d·ª±a tr√™n m√¥ h√¨nh ƒë∆∞·ª£c g√°n.\n\n\n\nCode\n## Chuy·ªÉn ƒë·ªëi t∆∞·ª£ng th√†nh d·∫°ng b·∫£ng ƒë·ªÉ d·ªÖ d√†ng l·∫•y d·ªØ li·ªáu:\n# Disable progress bar for a specific block of code\nmodeltime_tbl &lt;- modeltime_table(\n    model_fitted\n) \n\n## ƒê√°nh gi√° d·ªØ li·ªáu b·∫±ng h√†m modeltime_calibrate v√† hi·ªÉn th·ªã gi√° tr·ªã d·ª± ƒëo√°n:\ninvisible(capture.output({\n  k &lt;- modeltime_tbl %&gt;%\n    modeltime_calibrate(test_tbl) %&gt;%\n    modeltime_forecast(\n      new_data    = test_tbl,\n      actual_data = daily_df,\n      keep_data   = TRUE\n    )\n}))\n\n# Create the initial forecast plot\nforecast_plot &lt;- plot_modeltime_forecast(k %&gt;% \n        group_by(Warehouse),\n         .facet_ncol = 2, \n        .interactive = FALSE)\n\n# Rename the legend labels and customize colors\nforecast_plot_custom &lt;- forecast_plot +\n  scale_color_manual(\n    values = c(\"ACTUAL\" = \"darkgray\", \n               \"1_H2O AUTOML - GBM\" = \"red\"),  # Optional: Custom colors\n    labels = c(\"ACTUAL\" = \"Actual Value\", \n               \"1_H2O AUTOML - GBM\" = \"Model Value\")  # New legend labels\n  )\n\n# Print the customized plot\nprint(forecast_plot_custom)\n\n\n\n\n\nK·∫øt qu·∫£ ƒë∆∞a ra c√≥ v·∫ª kh√° t·ªá khi t·ªõi 90% t·ªâ l·ªá l·ªách gi·ªØa gi√° tr·ªã quan s√°t ƒë∆∞·ª£c v√† gi√° tr·ªã d·ª± ƒëo√°n v∆∞·ª£t qu√° 5%. C√≥ v·∫ª Machine Learning kh√¥ng d·ª± ƒëo√°n t·ªët ƒë·ªëi v·ªõi tr∆∞·ªùng h·ª£p d·ªØ li·ªáu l√† chu·ªói th·ªùi gian.\n\n\nCode\npredict&lt;-k %&gt;% \n  filter(.key == \"prediction\") %&gt;% \n  select(c(.index,Warehouse,.value)) %&gt;% \n  rename(Date = .index,\n         Predicted = .value) %&gt;% \n  mutate(Observed = test_tbl$daily_demand,\n         Diff = round((Observed - Predicted)/Observed*100,2),\n         Check = ifelse(Diff &lt;= 5 & Diff &gt;= -5, \"Passed\",\"Failed\"))\n\nlibrary(gt)\nlibrary(gtExtras)\ngt(predict %&gt;% \n     group_by(Warehouse) %&gt;% \n     count(Check) %&gt;% \n     mutate(Per = round(n/nrow(predict),3))) %&gt;% \n  cols_label(\n    Check = md(\"**Warehouse**\"),\n    n = md(\"**Count**\"),\n    Per = md(\"**Percentage**\")) %&gt;%\n  tab_header(\n    title = md(\"**Evaluating the model's accuracy**\"),\n    subtitle = glue::glue(\"Forecasting from {min(test_tbl$Date)} to {max(test_tbl$Date)}\")) %&gt;%\n   tab_source_note(\n    source_note = str_glue(\"Smaller 5% means passed\")) %&gt;% \n  gt_theme_538() %&gt;% \n  data_color(columns = c(\"Check\"),\n             method = \"factor\",\n             palette = c(\"red\",\"blue\")) %&gt;%\n  tab_options(\n    table.width = pct(80),       # Setting the table width to 80% of the page width\n    table.align = \"center\",      # Centering the table\n    column_labels.font.size = px(14), # Increase font size of column labels\n    table.font.size = px(12),    # Setting font size for the table\n    heading.align = \"center\"     # Centering the heading of the table\n  )\n### Remove Outliers using IQR method:\nfiltered_data &lt;- predict %&gt;%\n  group_by(Warehouse) %&gt;%\n  # Remove outliers using the IQR method\n  filter(\n    between(Diff, \n            quantile(Diff, 0.25) - 1.5 * IQR(Diff),\n            quantile(Diff, 0.75) + 1.5 * IQR(Diff))\n  ) %&gt;%\n  # Adjust values in the Warehouse column\n  mutate(Warehouse = case_when(\n    Warehouse == \"Whse_A\" ~ \"Warehouse A\",\n    Warehouse == \"Whse_C\" ~ \"Warehouse C\",\n    Warehouse == \"Whse_J\" ~ \"Warehouse J\",\n    Warehouse == \"Whse_S\" ~ \"Warehouse S\",\n    TRUE ~ as.character(Warehouse)  # Preserve other values if any\n  ))\n\nggplot(data = filtered_data %&gt;% \n         group_by(Warehouse),\n       aes(x = Date, \n           y = Diff)) + \n  geom_point() +\n  geom_smooth(method = \"lm\")+\n  geom_abline(intercept = 1, \n              slope = 0, color=\"red\", \n              linetype=\"dashed\", \n              size=1)+\n  xlab('Time') +\n  ylab('Difference (%)') +\n  theme_bw()+\n  facet_wrap(~ Warehouse, scales = \"free_y\") +\n  labs(title = \"Evaluating model builded by GBM method\",\n       subtitle = \"Observed vs Predicted value\",\n       caption = \"The red line is abline Y = 0 means accuracry prediction and the blue line is the linear lines between observed and predicted value.\")+\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16),  # Centering and resizing the title\n    plot.subtitle = element_text(hjust = 0.5, size = 12), # Centering and resizing the subtitle\n    axis.text = element_text(size = 10),  # Resizing axis text\n    axis.title = element_text(size = 12)  # Resizing axis labels\n  )\n\n\n\n\n\n\n\n\n  \n    \n      Evaluating the model‚Äôs accuracy\n\n    \n    \n      Forecasting from 2015-12-08 to 2016-12-30\n    \n    \n      Warehouse\n\n      Count\n\n      Percentage\n\n    \n  \n  \n    \n      Whse_A\n    \n    Failed\n296\n0.252\n    Passed\n7\n0.006\n    \n      Whse_C\n    \n    Failed\n283\n0.241\n    Passed\n9\n0.008\n    \n      Whse_J\n    \n    Failed\n243\n0.207\n    Passed\n35\n0.030\n    \n      Whse_S\n    \n    Failed\n288\n0.246\n    Passed\n12\n0.010\n  \n  \n    \n      Smaller 5% means passed\n    \n  \n  \n\n\n\n\n\n\n\n\n\nƒêi·ªÅu m√¨nh th√≠ch nh·∫•t ·ªü package n√†y l√† ta c√≥ th·ªÉ d·ªÖ d√†ng d·ª± ƒëo√°n cho nhi·ªÅu ƒë·ªëi t∆∞·ª£ng kh√°c nhau ch·ªâ v·ªõi g√°n th√™m h√†m group_by()."
  },
  {
    "objectID": "Time_series_2.html#h·ªçc-l·∫°i-d·ªØ-li·ªáu-v√†-d·ª±-ƒëo√°n-ti·∫øp",
    "href": "Time_series_2.html#h·ªçc-l·∫°i-d·ªØ-li·ªáu-v√†-d·ª±-ƒëo√°n-ti·∫øp",
    "title": "Auto Machine Learning",
    "section": "2.8 H·ªçc l·∫°i d·ªØ li·ªáu v√† d·ª± ƒëo√°n ti·∫øp:",
    "text": "2.8 H·ªçc l·∫°i d·ªØ li·ªáu v√† d·ª± ƒëo√°n ti·∫øp:\nTh·ª±c ch·∫•t d·ªØ li·ªáu t·ª´ training set v√† testing set c≈©ng ƒë∆∞·ª£c chia ra t·ª´ b·ªô d·ªØ li·ªáu ƒë√£ bi·∫øt ban ƒë·∫ßu, c√≤n d·ªØ li·ªáu trong t∆∞∆°ng lai ch√∫ng ta ch∆∞a bi·∫øt. V√≠ d·ª• nh∆∞ ·ªü ƒë√¢y, b·ªô d·ªØ li·ªáu n√†y ch·ªâ ƒë∆∞·ª£c thu th·∫≠p t·ªõi ng√†y 30/12/2016 n√™n nhu c·∫ßu ƒë·∫∑t h√†ng c·ªßa kh√°ch h√†ng ·ªü nƒÉm 2017 tr·ªü v·ªÅ sau l√† ch∆∞a bi·∫øt. V√¨ v·∫≠y, ch√∫ng ta s·∫Ω refit m√¥ h√¨nh l·∫°i.\nHo·∫°t ƒë·ªông refit nghƒ©a l√† s·ª≠ d·ª•ng m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c train v√† ch·ª©a t·∫•t c·∫£ d·ªØ li·ªáu m√¨nh c√≥ v√† d√πng n√≥ ƒë·ªÉ d·ª± ƒëo√°n gi√° tr·ªã cho m·ªôt kho·∫£ng th·ªùi gian s·∫Øp t·ªõi.\n\n\nCode\n## G·ªôp d·ªØ li·ªáu t·ª´ training set v√† testing set th√†nh m·ªôt:\ndata_prepared_tbl &lt;- bind_rows(train_tbl, test_tbl)\n\n\n## T·∫°o th√™m c√°c h√†ng cho d·ªØ li·ªáu s·∫Øp t·ªõi. V√≠ d·ª• ta c·∫ßn trong 6 th√°ng th√¨ h√†m s·∫Ω t·∫°o th√™m 365*4 = 1460 h√†ng:\nfuture_tbl &lt;- data_prepared_tbl %&gt;%\n    group_by(Warehouse) %&gt;%\n    future_frame(.length_out = \"6 months\") %&gt;%\n    ungroup()\n\n## T·∫°o th√™m c√°c ƒë·∫∑c t√≠nh kh√°c c·ªßa d·ªØ li·ªáu gi·ªëng nh∆∞ tr√™n ƒë√£ l√†m:\nfuture_prepared_tbl &lt;- bake(prep(recipe_spec), future_tbl)\n\n\n\n\n\n\n\n\nCh·ªânh th·ªùi gian d·ª± ƒëo√°n\n\n\n\nB·∫°n c√≥ th·ªÉ ch·ªânh kho·∫£ng th·ªùi gian c·∫ßn d·ª± ƒëo√°n theo √Ω b·∫°n trong h√†m future_frame b·∫±ng ƒë·ªëi s·ªë .length_out.\nV√≠ d·ª• m·ªôt nƒÉm th√¨ = \"1 year\", 45 ph√∫t th√¨ = \"45 minutes\".\n\n\nV√† cu·ªëi c√πng l√† d·ª± ƒëo√°n nhu c·∫ßu ƒë·∫∑t h√†ng cho t·ª´ng nh√† kho trong 6 th√°ng ti·∫øp theo.\n\n\nCode\nrefit_tbl &lt;- modeltime_tbl %&gt;%\n    modeltime_refit(data_prepared_tbl)\n\n\n\n\nCode\ninvisible(capture.output({\nrefit_tbl&lt;-refit_tbl %&gt;%\n    modeltime_forecast(\n        new_data    = future_prepared_tbl,\n        actual_data = data_prepared_tbl,\n        keep_data   = TRUE)\n  \nrefit_tbl %&gt;% \n  group_by(Warehouse) %&gt;% \n  plot_modeltime_forecast(\n         .facet_ncol = 2, \n         .interactive = FALSE)\n}))"
  }
]